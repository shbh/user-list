{"ast":null,"code":"var _jsxFileName = \"/home/shubham/Development/task-assement/task-asseemnet/src/component/context/UserContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext(undefined);\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  const [userList, setUsers] = useState([]);\n  const [darkMode, setDarkMode] = useState(false);\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/users');\n        const data = await response.json();\n        setUsers(data);\n      } catch (error) {\n        console.error(\"Failed to fetch user data:\", error);\n      }\n    };\n    fetchUsers();\n  }, []);\n  const toggleTheme = () => setDarkMode(!darkMode);\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      userList,\n      darkMode,\n      toggleTheme\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: darkMode ? 'dark' : '',\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n_s(UserProvider, \"QSIWAqf2sWiPdVOeZfIZJPOrBK8=\");\n_c = UserProvider;\nexport const useUserContext = () => {\n  _s2();\n  const context = useContext(UserContext);\n  if (!context) {\n    throw new Error(\"useUserContext must be used within a UserProvider\");\n  }\n  return context;\n};\n_s2(useUserContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","UserContext","undefined","UserProvider","children","_s","userList","setUsers","darkMode","setDarkMode","fetchUsers","response","fetch","data","json","error","console","toggleTheme","Provider","value","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","useUserContext","_s2","context","Error","$RefreshReg$"],"sources":["/home/shubham/Development/task-assement/task-asseemnet/src/component/context/UserContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\ninterface User {\n    id: number;\n    name: string;\n    email: string;\n    company: { name: string };\n    phone: string;\n    address: { street: string };\n}\n\ninterface UserContextType {\n    userList: User[];\n    darkMode: boolean;\n    toggleTheme: () => void;\n}\n\nconst UserContext = createContext<UserContextType | undefined>(undefined);\n\nexport const UserProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n    const [userList, setUsers] = useState<User[]>([]);\n    const [darkMode, setDarkMode] = useState(false);\n\n    useEffect(() => {\n        const fetchUsers = async () => {\n            try {\n                const response = await fetch('https://jsonplaceholder.typicode.com/users');\n                const data = await response.json();\n                setUsers(data);\n            } catch (error) {\n                console.error(\"Failed to fetch user data:\", error);\n            }\n        };\n        fetchUsers();\n    }, []);\n\n    const toggleTheme = () => setDarkMode(!darkMode);\n\n    return (\n        <UserContext.Provider value={{ userList, darkMode, toggleTheme }}>\n            <div className={darkMode ? 'dark' : ''}>{children}</div>\n        </UserContext.Provider>\n    );\n};\n\nexport const useUserContext = () => {\n    const context = useContext(UserContext);\n    if (!context) {\n        throw new Error(\"useUserContext must be used within a UserProvider\");\n    }\n    return context;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAiBzF,MAAMC,WAAW,gBAAGN,aAAa,CAA8BO,SAAS,CAAC;AAEzE,OAAO,MAAMC,YAA+C,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7E,MAAM,CAACC,QAAQ,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAS,EAAE,CAAC;EACjD,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAE/CC,SAAS,CAAC,MAAM;IACZ,MAAMY,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,CAAC;QAC1E,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCP,QAAQ,CAACM,IAAI,CAAC;MAClB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACtD;IACJ,CAAC;IACDL,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMO,WAAW,GAAGA,CAAA,KAAMR,WAAW,CAAC,CAACD,QAAQ,CAAC;EAEhD,oBACIR,OAAA,CAACC,WAAW,CAACiB,QAAQ;IAACC,KAAK,EAAE;MAAEb,QAAQ;MAAEE,QAAQ;MAAES;IAAY,CAAE;IAAAb,QAAA,eAC7DJ,OAAA;MAAKoB,SAAS,EAAEZ,QAAQ,GAAG,MAAM,GAAG,EAAG;MAAAJ,QAAA,EAAEA;IAAQ;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtC,CAAC;AAE/B,CAAC;AAACnB,EAAA,CAxBWF,YAA+C;AAAAsB,EAAA,GAA/CtB,YAA+C;AA0B5D,OAAO,MAAMuB,cAAc,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAChC,MAAMC,OAAO,GAAGhC,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI,CAAC2B,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,mDAAmD,CAAC;EACxE;EACA,OAAOD,OAAO;AAClB,CAAC;AAACD,GAAA,CANWD,cAAc;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}